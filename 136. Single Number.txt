Brute Force method: time complexity O(n^2)
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        for i in nums:
            if nums.count(i)==1:
                return i




Better Approach: Hashing/ Dictionary: time complexity O(n) but space is O(n)

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        # for i in nums:
        #     if nums.count(i)==1:
        #         return i
        d={}
        for i in nums:
            d[i] = d.get(i,0) + 1
        for k,v in d.items():
            if v==1:
                return k



Optimal: time- O(n) space-O(1)
solution with a linear runtime complexity and use only constant extra space.

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        val=0
        for i in nums:
            val=val^i
        return val