Solution w/o built in function - two pointer method (O(nlogn)):


class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        i=0
        k=0
        nums.sort()
        f=nums.count(val)
        while k<=i and i<len(nums):
            if (nums[i]!= val and nums[k]!= val):
                i+=1
                k+=1
            elif (nums[i]==val):
                i+=1
            else:
                t=nums[k]
                nums[k]=nums[i]
                nums[i]=t
                i+=1
                k+=1
        return len(nums)-f


using built in funct (remove())-(O(n^2)):

class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        i = 0
        while i < len(nums):
            if nums[i] == val:
                nums.remove(val)
            else: i += 1
        k = len(nums)
        return k
