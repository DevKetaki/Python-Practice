My soln: Brute force- O(n^2):


class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        i=0
        l=list()
        t=list()
        max=0
        j=0
        while(i<len(s)):
            if s[i] not in l:
                l.append(s[i])
                if(max<len(l)):
                    max=len(l)
                i+=1
            else:
                t=s[:i]
                j=(t.rfind(s[i]))+1
                i=j
                l.clear()
                l.append(s[i])
                i+=1
        return max
   

Better soln: Sliding Window approach- O(n)

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        n = len(s)
        maxLength = 0
        charSet = set()
        left = 0
        
        for right in range(n):
            if s[right] not in charSet:
                charSet.add(s[right])
                maxLength = max(maxLength, right - left + 1)
            else:
                while s[right] in charSet:
                    charSet.remove(s[left])
                    left += 1
                charSet.add(s[right])
        
        return maxLength    