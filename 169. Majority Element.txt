Solution using hashing- O(n) with space complexity -O(n)

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        d={}
        for i in nums:
            d[i]=d.get(i,0)+1
        for k,freq in d.items():
            if freq>(len(nums)//2):
                return k



Solution using Boyer-Moore Voting Algorithm - O(n) with space complexity -O(1)

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        
        cnt = 0
        candidate = 0

        for num in nums:
            if cnt == 0:
                candidate = num
            
            if num == candidate:
                cnt += 1
            else:
                cnt -= 1
        return candidate