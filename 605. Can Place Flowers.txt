My solution: O(n)

class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        i=0
        c=flowerbed.count(1)
        if(len (flowerbed)==1 and 0 in flowerbed):
            flowerbed[i]=1
            i=i+1
        while(i<len(flowerbed)):
            if(flowerbed[i]==1):
                i=i+2
            elif(flowerbed[i]==0):
                if(i==0 and flowerbed[i+1]==0):
                    flowerbed[i]=1
                    i=i+2
                elif(i==len(flowerbed)-1) and flowerbed[i-1]==0:
                    flowerbed[i]=1
                    i=i+2
                elif(flowerbed[i+1]==0 and flowerbed[i-1]==0):
                    flowerbed[i]=1
                    i=i+2
                else:
                    i=i+1
        k=flowerbed.count(1)
        q=k-c
        if (q>=n):
            return True
        else:
            return False


Concise: O(n)
class Solution:
  def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
    for i, flower in enumerate(flowerbed):
      if flower == 0 and (i == 0 or flowerbed[i - 1] == 0) and (i == len(flowerbed) - 1 or flowerbed[i + 1] == 0):
        flowerbed[i] = 1
        n -= 1
      if n <= 0:
        return True

    return False