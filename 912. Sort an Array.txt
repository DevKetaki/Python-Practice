Since the question directly asks to sort the array with TC= O(n log n)without using any inbuilt function- then the clue is use merge sort.
since we use a similar length array to store the sorted array the space complexity will be O(n)


class Solution:
    def mergesort(self,arr,low,high):
        if(low>=high):
            return
        mid=(low+high)//2
        self.mergesort(arr,low,mid)
        self.mergesort(arr,mid+1,high)
        self.merge(arr,low,mid,high)
  

    def merge(self,arr,low,mid,high):
        temp=[]
        left=low
        right=mid+1
        while((left<=mid) and (right<=high)):
            if (arr[left]<=arr[right]):
                temp.append(arr[left])
                left+=1
            else:
                temp.append(arr[right])
                right+=1
        while(left<=mid):
                temp.append(arr[left])
                left+=1
        while(right<=high):
                temp.append(arr[right])
                right+=1
        for i in range(low,high+1):
                arr[i]=temp[i-low]
        
    def sortArray(self, nums: List[int]) -> List[int]:
        v=len(nums)-1
        self.mergesort(nums,0,v)
        return nums

